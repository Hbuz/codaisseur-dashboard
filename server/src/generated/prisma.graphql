# source: http://localhost:4466
# timestamp: Sun Oct 07 2018 12:39:07 GMT+0200 (CEST)

type AggregateCompany {
  count: Int!
}

type AggregateFunny {
  count: Int!
}

type AggregateNationality {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Company implements Node {
  id: ID!
  name: String!
  city: String!
  numberOfStudents: Int
  logo: String
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  name: String!
  city: String!
  numberOfStudents: Int
  logo: String
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  city_ASC
  city_DESC
  numberOfStudents_ASC
  numberOfStudents_DESC
  logo_ASC
  logo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  city: String!
  numberOfStudents: Int
  logo: String
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  name: String
  city: String
  numberOfStudents: Int
  logo: String
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  numberOfStudents: Int

  """All values that are not equal to given value."""
  numberOfStudents_not: Int

  """All values that are contained in given list."""
  numberOfStudents_in: [Int!]

  """All values that are not contained in given list."""
  numberOfStudents_not_in: [Int!]

  """All values less than the given value."""
  numberOfStudents_lt: Int

  """All values less than or equal the given value."""
  numberOfStudents_lte: Int

  """All values greater than the given value."""
  numberOfStudents_gt: Int

  """All values greater than or equal the given value."""
  numberOfStudents_gte: Int
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
}

input CompanyWhereUniqueInput {
  id: ID
  name: String
}

type Funny implements Node {
  id: ID!
  item: String!
  count: Int
}

"""A connection to a list of items."""
type FunnyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FunnyEdge]!
  aggregate: AggregateFunny!
}

input FunnyCreateInput {
  item: String!
  count: Int
}

"""An edge in a connection."""
type FunnyEdge {
  """The item at the end of the edge."""
  node: Funny!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FunnyOrderByInput {
  id_ASC
  id_DESC
  item_ASC
  item_DESC
  count_ASC
  count_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FunnyPreviousValues {
  id: ID!
  item: String!
  count: Int
}

type FunnySubscriptionPayload {
  mutation: MutationType!
  node: Funny
  updatedFields: [String!]
  previousValues: FunnyPreviousValues
}

input FunnySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FunnySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FunnySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FunnySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FunnyWhereInput
}

input FunnyUpdateInput {
  item: String
  count: Int
}

input FunnyWhereInput {
  """Logical AND on all given filters."""
  AND: [FunnyWhereInput!]

  """Logical OR on all given filters."""
  OR: [FunnyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FunnyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  item: String

  """All values that are not equal to given value."""
  item_not: String

  """All values that are contained in given list."""
  item_in: [String!]

  """All values that are not contained in given list."""
  item_not_in: [String!]

  """All values less than the given value."""
  item_lt: String

  """All values less than or equal the given value."""
  item_lte: String

  """All values greater than the given value."""
  item_gt: String

  """All values greater than or equal the given value."""
  item_gte: String

  """All values containing the given string."""
  item_contains: String

  """All values not containing the given string."""
  item_not_contains: String

  """All values starting with the given string."""
  item_starts_with: String

  """All values not starting with the given string."""
  item_not_starts_with: String

  """All values ending with the given string."""
  item_ends_with: String

  """All values not ending with the given string."""
  item_not_ends_with: String
  count: Int

  """All values that are not equal to given value."""
  count_not: Int

  """All values that are contained in given list."""
  count_in: [Int!]

  """All values that are not contained in given list."""
  count_not_in: [Int!]

  """All values less than the given value."""
  count_lt: Int

  """All values less than or equal the given value."""
  count_lte: Int

  """All values greater than the given value."""
  count_gt: Int

  """All values greater than or equal the given value."""
  count_gte: Int
}

input FunnyWhereUniqueInput {
  id: ID
  item: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createNationality(data: NationalityCreateInput!): Nationality!
  createFunny(data: FunnyCreateInput!): Funny!
  createCompany(data: CompanyCreateInput!): Company!
  updateNationality(data: NationalityUpdateInput!, where: NationalityWhereUniqueInput!): Nationality
  updateFunny(data: FunnyUpdateInput!, where: FunnyWhereUniqueInput!): Funny
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  deleteNationality(where: NationalityWhereUniqueInput!): Nationality
  deleteFunny(where: FunnyWhereUniqueInput!): Funny
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  upsertNationality(where: NationalityWhereUniqueInput!, create: NationalityCreateInput!, update: NationalityUpdateInput!): Nationality!
  upsertFunny(where: FunnyWhereUniqueInput!, create: FunnyCreateInput!, update: FunnyUpdateInput!): Funny!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  updateManyNationalities(data: NationalityUpdateInput!, where: NationalityWhereInput): BatchPayload!
  updateManyFunnies(data: FunnyUpdateInput!, where: FunnyWhereInput): BatchPayload!
  updateManyCompanies(data: CompanyUpdateInput!, where: CompanyWhereInput): BatchPayload!
  deleteManyNationalities(where: NationalityWhereInput): BatchPayload!
  deleteManyFunnies(where: FunnyWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Nationality implements Node {
  id: ID!
  nationality: String!
  count: Int
}

"""A connection to a list of items."""
type NationalityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NationalityEdge]!
  aggregate: AggregateNationality!
}

input NationalityCreateInput {
  nationality: String!
  count: Int
}

"""An edge in a connection."""
type NationalityEdge {
  """The item at the end of the edge."""
  node: Nationality!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NationalityOrderByInput {
  id_ASC
  id_DESC
  nationality_ASC
  nationality_DESC
  count_ASC
  count_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NationalityPreviousValues {
  id: ID!
  nationality: String!
  count: Int
}

type NationalitySubscriptionPayload {
  mutation: MutationType!
  node: Nationality
  updatedFields: [String!]
  previousValues: NationalityPreviousValues
}

input NationalitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NationalitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NationalitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NationalitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NationalityWhereInput
}

input NationalityUpdateInput {
  nationality: String
  count: Int
}

input NationalityWhereInput {
  """Logical AND on all given filters."""
  AND: [NationalityWhereInput!]

  """Logical OR on all given filters."""
  OR: [NationalityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NationalityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  nationality: String

  """All values that are not equal to given value."""
  nationality_not: String

  """All values that are contained in given list."""
  nationality_in: [String!]

  """All values that are not contained in given list."""
  nationality_not_in: [String!]

  """All values less than the given value."""
  nationality_lt: String

  """All values less than or equal the given value."""
  nationality_lte: String

  """All values greater than the given value."""
  nationality_gt: String

  """All values greater than or equal the given value."""
  nationality_gte: String

  """All values containing the given string."""
  nationality_contains: String

  """All values not containing the given string."""
  nationality_not_contains: String

  """All values starting with the given string."""
  nationality_starts_with: String

  """All values not starting with the given string."""
  nationality_not_starts_with: String

  """All values ending with the given string."""
  nationality_ends_with: String

  """All values not ending with the given string."""
  nationality_not_ends_with: String
  count: Int

  """All values that are not equal to given value."""
  count_not: Int

  """All values that are contained in given list."""
  count_in: [Int!]

  """All values that are not contained in given list."""
  count_not_in: [Int!]

  """All values less than the given value."""
  count_lt: Int

  """All values less than or equal the given value."""
  count_lte: Int

  """All values greater than the given value."""
  count_gt: Int

  """All values greater than or equal the given value."""
  count_gte: Int
}

input NationalityWhereUniqueInput {
  id: ID
  nationality: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  nationalities(where: NationalityWhereInput, orderBy: NationalityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nationality]!
  funnies(where: FunnyWhereInput, orderBy: FunnyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Funny]!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  nationality(where: NationalityWhereUniqueInput!): Nationality
  funny(where: FunnyWhereUniqueInput!): Funny
  company(where: CompanyWhereUniqueInput!): Company
  nationalitiesConnection(where: NationalityWhereInput, orderBy: NationalityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NationalityConnection!
  funniesConnection(where: FunnyWhereInput, orderBy: FunnyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FunnyConnection!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  nationality(where: NationalitySubscriptionWhereInput): NationalitySubscriptionPayload
  funny(where: FunnySubscriptionWhereInput): FunnySubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
}
